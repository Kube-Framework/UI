#version 450

#extension GL_GOOGLE_include_directive : enable
// #extension GL_EXT_debug_printf : enable

#include "FilledQuad.glsl"

// Text glyph instance
struct Instance
{
    vec2 uvPos;
    vec2 uvSize;
    vec2 pos;
    uint spriteIndex;
    uint color;
    vec2 rotationOrigin;
    float rotationAngle;
    float vertical;
};

#include "../PrimitiveCompute.glsl"

layout (local_size_x = 128) in;

void main(void)
{
    // Don't compute if invocation index is out of instance range
    const uint instanceIndex = gl_GlobalInvocationID.x;
    if (instanceIndex >= computeConstants.instanceCount)
        return;

    // Compute metrics
    const Offset offset = offsets.data[instanceIndex];
    const Instance instance = instances.data[instanceIndex];
    const bool isVertical = bool(instance.vertical != 0.0);
    // Compute relative UVs
    const Quad uvQuad = getTextUVQuad(Area(instance.uvPos, instance.uvSize), textureSize(sprites[nonuniformEXT(instance.spriteIndex)], 0), isVertical);
    // Compute relative area
    const vec2 rotationCosSin = getCosSin(instance.rotationAngle);
    const mat2 rotationMatrix = getRotationMatrix(rotationCosSin);
    const Area clampedArea = getClampedArea(Area(instance.pos, branchlessIf(isVertical, instance.uvSize.yx, instance.uvSize)));
    const Quad quad = getTextRelativeQuad(clampedArea, rotationMatrix, instance.rotationOrigin);

    // Set vertices
    Vertex vertex;
    vertex.halfSize = clampedArea.size / 2.0;
    vertex.center = clampedArea.pos + vertex.halfSize;
    vertex.radius = vec4(0.0);
    vertex.spriteIndex = instance.spriteIndex;
    vertex.color = instance.color;
    vertex.borderColor = 0;
    vertex.borderWidth = 0.0;
    vertex.edgeSoftness = 0.0;
    vertex.rotationOrigin = instance.rotationOrigin;
    vertex.rotationCosSin = rotationCosSin;
    //   TopLeft
    vertex.pos = quad.p1;
    vertex.uv = uvQuad.p1;
    vertices.data[offset.vertexOffset + 0] = vertex;
    //   TopRight
    vertex.pos = quad.p2;
    vertex.uv = uvQuad.p2;
    vertices.data[offset.vertexOffset + 1] = vertex;
    //   BottomRight
    vertex.pos = quad.p3;
    vertex.uv = uvQuad.p3;
    vertices.data[offset.vertexOffset + 2] = vertex;
    //   BottomLeft
    vertex.pos = quad.p4;
    vertex.uv = uvQuad.p4;
    vertices.data[offset.vertexOffset + 3] = vertex;

    // Set indices
    //   TopRight Triangle
    indices.data[offset.indexOffset + 0] = offset.vertexOffset + 0;
    indices.data[offset.indexOffset + 1] = offset.vertexOffset + 1;
    indices.data[offset.indexOffset + 2] = offset.vertexOffset + 2;
    //   BottomLeft Triangle
    indices.data[offset.indexOffset + 3] = offset.vertexOffset + 2;
    indices.data[offset.indexOffset + 4] = offset.vertexOffset + 3;
    indices.data[offset.indexOffset + 5] = offset.vertexOffset + 0;
}