#version 450

#extension GL_GOOGLE_include_directive : enable

#include "QuadraticBezier.glsl"

// Rectangle instance
struct Instance
{
    Area area; // Frame area
    vec2 left; // Curve left point
    vec2 control; // Curve control point
    vec2 right; // Curve right point
    uint color; // Curve color
    uint innerColor; // Inner color
    float thickness; // Width of the line
    float edgeSoftness; // Edge softness in pixels
};

#include "../PrimitiveCompute.glsl"

layout (local_size_x = 64) in;

void main(void)
{
    // Don't compute if invocation index is out of instance range
    const uint instanceIndex = gl_GlobalInvocationID.x;
    if (instanceIndex >= computeConstants.instanceCount)
        return;

    // Compute metrics
    const Offset offset = offsets.data[instanceIndex];
    const Instance instance = instances.data[instanceIndex];
    const Area clampedArea = getClampedArea(instance.area);
    const vec2 midPoint = (instance.left + instance.right + instance.control) / 3.0;

    // Set vertices
    Vertex vertex;
    vertex.left = instance.left;
    vertex.control = instance.control;
    vertex.right = instance.right;
    vertex.color = instance.color;
    vertex.innerColor = instance.innerColor;
    vertex.thickness = instance.thickness;
    vertex.edgeSoftness = instance.edgeSoftness;
    //   TopLeft
    vertex.pos = toRelative(clampedArea.pos);
    vertices.data[offset.vertexOffset + 0] = vertex;
    //   TopRight
    vertex.pos = toRelative(clampedArea.pos + vec2(clampedArea.size.x, 0.0));
    vertices.data[offset.vertexOffset + 1] = vertex;
    //   BottomRight
    vertex.pos = toRelative(clampedArea.pos + clampedArea.size);
    vertices.data[offset.vertexOffset + 2] = vertex;
    //   BottomLeft
    vertex.pos = toRelative(clampedArea.pos + vec2(0.0, clampedArea.size.y));
    vertices.data[offset.vertexOffset + 3] = vertex;

    // Set indices
    //   TopLeft Triangle
    indices.data[offset.indexOffset + 0] = offset.vertexOffset + 0;
    indices.data[offset.indexOffset + 1] = offset.vertexOffset + 1;
    indices.data[offset.indexOffset + 2] = offset.vertexOffset + 2;
    //   BottomRight Triangle
    indices.data[offset.indexOffset + 3] = offset.vertexOffset + 2;
    indices.data[offset.indexOffset + 4] = offset.vertexOffset + 3;
    indices.data[offset.indexOffset + 5] = offset.vertexOffset + 0;
}