#version 450

// #extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : enable

// Rectangle instance
struct Instance
{
    vec2 a0; // Curve begin point
    vec2 a1; // Curve control point 1
    vec2 a2; // Curve control point 2
    vec2 a3; // Curve end point
    uint color; // Fill color
    float thickness; // Width of the line
    float edgeSoftness; // Edge softness in pixels
    uint _padding;
};

#include "CubicBezierUtils.glsl"
#include "PrimitiveCompute.glsl"

layout (local_size_x = 1) in;

void main(void)
{
    const uint instanceIndex = gl_GlobalInvocationID.x;
    const Offset offset = offsets.data[instanceIndex];
    const Instance instance = instances.data[instanceIndex];

    // Set vertices
    Vertex vertex;
    vertex.left = instance.left;
    vertex.control = instance.control;
    vertex.right = instance.right;
    vertex.color = instance.color;
    vertex.thickness = instance.thickness;
    vertex.edgeSoftness = instance.edgeSoftness;
    //   TopLeft
    vertex.pos = toRelative(instance.area.pos);
    // vertex.pos = toRelative(moveAway(instance.left, instance.left - instance.right + instance.left - instance.control, moveAwayDistance));
    vertices.data[offset.vertexOffset + 0] = vertex;
    //   TopRight
    vertex.pos = toRelative(instance.area.pos + vec2(instance.area.size.x, 0.0));
    // vertex.pos = toRelative(moveAway(instance.control, instance.control - instance.left + instance.control - instance.right, moveAwayDistance));
    vertices.data[offset.vertexOffset + 1] = vertex;
    //   BottomRight
    vertex.pos = toRelative(instance.area.pos + instance.area.size);
    // vertex.pos = toRelative(moveAway(instance.right, instance.right - instance.left + instance.right - instance.control, moveAwayDistance));
    vertices.data[offset.vertexOffset + 2] = vertex;
    //   BottomLeft
    vertex.pos = toRelative(instance.area.pos + vec2(0.0, instance.area.size.y));
    // vertex.pos = toRelative(moveAway(instance.right, instance.right - instance.left + instance.right - instance.control, moveAwayDistance));
    vertices.data[offset.vertexOffset + 3] = vertex;

    // Set indices
    //   TopLeft Triangle
    indices.data[offset.indexOffset + 0] = offset.vertexOffset + 0;
    indices.data[offset.indexOffset + 1] = offset.vertexOffset + 1;
    indices.data[offset.indexOffset + 2] = offset.vertexOffset + 2;
    //   BottomRight Triangle
    indices.data[offset.indexOffset + 3] = offset.vertexOffset + 2;
    indices.data[offset.indexOffset + 4] = offset.vertexOffset + 3;
    indices.data[offset.indexOffset + 5] = offset.vertexOffset + 0;
}