#version 450

#extension GL_GOOGLE_include_directive : enable

// Area
struct Area
{
    vec2 pos;
    vec2 size;
};

// Rectangle instance
struct Instance
{
    Area area;
    vec4 radius;
    uint spriteIndex;
    uint fillMode;
    uint color;
    uint borderColor;
    float borderWidth;
    float edgeSoftness;
    float rotationAngle;
};

#include "RectangleUtils.glsl"

void main(void)
{
    // Compute metrics
    const uint instanceIndex = gl_GlobalInvocationID.x;
    const Offset offset = offsets.data[instanceIndex];
    const Instance instance = instances.data[instanceIndex];
    const vec2 uvs[4] = getUVs(instance.area.size, instance.spriteIndex, instance.fillMode);
    const vec2 rotationCosSin = vec2(cos(instance.rotationAngle), sin(instance.rotationAngle));
    const Quad quad = getQuad(instance.area.pos, instance.area.size, instance.spriteIndex, instance.fillMode, rotationCosSin);

    // Set vertices
    Vertex vertex;
    vertex.halfSize = instance.area.size / 2.0;
    vertex.center = instance.area.pos + instance.area.size / 2.0;
    vertex.radius = instance.radius;
    vertex.spriteIndex = instance.spriteIndex;
    vertex.color = instance.color;
    vertex.borderColor = instance.borderColor;
    vertex.borderWidth = instance.borderWidth;
    vertex.edgeSoftness = instance.edgeSoftness;
    vertex.rotationCosSin = rotationCosSin;
    //   TopLeft
    vertex.pos = quad.p1;
    vertex.uv = uvs[0];
    vertices.data[offset.vertexOffset + 0] = vertex;
    //   TopRight
    vertex.pos = quad.p2;
    vertex.uv = uvs[1];
    vertices.data[offset.vertexOffset + 1] = vertex;
    //   BottomRight
    vertex.pos = quad.p3;
    vertex.uv = uvs[2];
    vertices.data[offset.vertexOffset + 2] = vertex;
    //   BottomLeft
    vertex.pos = quad.p4;
    vertex.uv = uvs[3];
    vertices.data[offset.vertexOffset + 3] = vertex;

    // Set indices
    //   TopLeft Triangle
    indices.data[offset.indexOffset + 0] = offset.vertexOffset + 0;
    indices.data[offset.indexOffset + 1] = offset.vertexOffset + 1;
    indices.data[offset.indexOffset + 2] = offset.vertexOffset + 2;
    //   BottomRight Triangle
    indices.data[offset.indexOffset + 3] = offset.vertexOffset + 2;
    indices.data[offset.indexOffset + 4] = offset.vertexOffset + 3;
    indices.data[offset.indexOffset + 5] = offset.vertexOffset + 0;
}